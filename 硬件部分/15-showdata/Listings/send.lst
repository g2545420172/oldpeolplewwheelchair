C51 COMPILER V9.60.0.0   SEND                                                              12/20/2020 19:31:17 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SEND
OBJECT MODULE PLACED IN .\Objects\send.obj
COMPILER INVOKED BY: D:\APP\Keil\C51\BIN\C51.EXE app\send.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\app) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\send.lst) OBJECT(.\Objects\send.obj)

line level    source

   1          /***
   2          串口控制发送函数，
   3          主要用于控制串口一发送数据，我们这里利用串口1向wifi发送数据
   4          ***/
   5          #include "reg51.h"
   6          #include "intrins.h"
   7          #include "send.h"
   8          #include "heart.h"
   9          #define FOSC 11059200L          //系统频率
  10          #define BAUD 9600             //串口波特率
  11          
  12          sfr AUXR  = 0x8e;               //辅助寄存器
  13          
  14          sfr P_SW1   = 0xA2;             //外设功能切换寄存器1
  15          
  16          #define S1_S0 0x40              //P_SW1.6
  17          #define S1_S1 0x80              //P_SW1.7
  18          
  19          bit busy;
  20          
  21          
  22          /*串口初始化*/
  23          void uInit()
  24          {
  25   1              //ACC 是一个累加器，主要用来存放数据
  26   1              ACC = P_SW1;
  27   1          ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
  28   1              //P_SW1是一个特殊功能的寄存器，用来将串口1进行切换
  29   1          P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
  30   1              // 串行控制器SCON为01010000
  31   1              //SM0为0 SM1为1 说明工作方式为方式1 8位UART，波特率可变
  32   1              //SM2为0 说明不是多机通信
  33   1              //REN为1 允许串行接收
  34   1              //TB8为0 在方式2或3中表示发送的第9位数据，我们用的是方式1不管
  35   1              //RB8为0 在方式2或3中表示接收的第9位数据，我们也不管
  36   1              //TI为0 主要用于发送中断请求的标志位
  37   1              //RI为0 用于接收中断的标志位
  38   1          SCON = 0x50;                //8位可变波特率
  39   1              //AUXR是辅助寄存器用来控制定时器的分频
  40   1              //01000000 T1x12为1表示定时器1的速度是传统8051的12倍
  41   1          AUXR = 0x40;                //定时器1为1T模式
  42   1              //TMOD是定时器/计数器的工作模式寄存器，用来控制定时器的操作模式，我们设置的是模式0
  43   1          TMOD = 0x00;                //定时器1为模式0(16位自动重载)
  44   1              //TL1是定时器的低8位，TH1是定时器的高8位，这个定时器主要是用来控制波特率的
  45   1          TL1 = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
  46   1          TH1 = (65536 - (FOSC/4/BAUD))>>8;
  47   1              //TR1为1表示定时器1的控制为，如果为1就表示开始启动定时器
  48   1          TR1 = 1;                    //定时器1开始启动
  49   1              //ES主要是串口中断控制为，如果为1表示允许串口中断
  50   1          ES = 1;                     //使能串口中断
  51   1              //EA表示CPU总的中断允许位，如果为1，那么就表示开放CPU中断
  52   1          EA = 1;
  53   1       //   SendString("STC15F2K60S2\r\nUart Test !\r\n");
  54   1      }
C51 COMPILER V9.60.0.0   SEND                                                              12/20/2020 19:31:17 PAGE 2   

  55          
  56          
  57          /*----------------------------
  58          UART 中断服务程序
  59          interrupt 4表示串口中断
  60          //对于51来说
  61          中断bai0 外部中断0
  62          中断du1 定时器zhi1中断
  63          中断2 外部中断1
  64          中断3 定时器2中断
  65          中断4 串口中断
  66          
  67          using解释
  68          用来选择80c51单片机中不同的寄存器组，你也知道R0-R7总共有4组，那么using 后面的数字也就是0-3范围里的一个数了
             -。如果不需要using的话，编译器会自动选择一组寄存器作为绝对寄存器访问的。
  69          using对代码是有一定的影响的。
  70          给你说个简单的例子，你可以想下，
  71          如果定义 
  72          void time0() interrupt 1 using 1
  73          假设，我们又在中断里调用了一个delay();这个delay是起延时作用。
  74          那么，我们就需要确保我们使用的寄存器组是同一组，否则，就会出现混乱。
  75          -----------------------------*/
  76          void Uart() interrupt 4
  77          {
  78   1              unsigned char dat;
  79   1              // 在串口发生中断的时候RI为1表示有数据接收，我们把这位清零用于下次判断
  80   1          if (RI)
  81   1          {
  82   2              RI = 0;                 //清除RI位
  83   2                      dat = SBUF;
  84   2                      //SendData2(dat);
  85   2             // P0 = SBUF;              //P0显示串口数据
  86   2          }
  87   1              // TI为0表示发送中断，我们主要用来判断当前是否可以发送数据
  88   1          if (TI)
  89   1          {
  90   2              TI = 0;                 //清除TI位
  91   2              busy = 0;               //清忙标志
  92   2          }
  93   1      }
  94          
  95          /*----------------------------
  96          发送串口数据
  97          这个函数用来向串口发送数据
  98          ----------------------------*/
  99          void SendData(unsigned char dat)
 100          {
 101   1              // busy判断数据是否发送完毕
 102   1          while (busy);           //等待前面的数据发送完成
 103   1              // 我们用ACC来存放发送的数据
 104   1          ACC = dat;                  //获取校验位P (PSW.0)
 105   1              //P表示奇偶的标志位（当ACC1的个数为奇数的时候P为1反之）。TB8是发送的第9位数据，所以这个是用来校验的
 106   1              // 因为我们不校验，所以不需要设置这个东西
 107   1      //    if (P)                      //根据P来设置校验位
 108   1      //    {
 109   1      //        TB8 = 0;                //设置校验位为0
 110   1      //    }
 111   1      //    else
 112   1      //    {
 113   1      //        TB8 = 1;                //设置校验位为1
 114   1      //    }
 115   1              // busy表示需要发送数据，当发送完毕时，会清0
C51 COMPILER V9.60.0.0   SEND                                                              12/20/2020 19:31:17 PAGE 3   

 116   1          busy = 1;
 117   1              // 发需要发送的数据放到寄存器中去
 118   1          SBUF = ACC;                 //写数据到UART数据寄存器
 119   1      }
 120          
 121          /*----------------------------
 122          发送字符串，因为字符串是一个字符数组，所以我们这里是通过指针来发送数据
 123          ----------------------------*/
 124          void SendString(char *s)
 125          {
 126   1          while (*s)                  //检测字符串结束标志
 127   1          {
 128   2              SendData(*s++);         //发送当前字符
 129   2          }
 130   1      }
 131          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     90    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
